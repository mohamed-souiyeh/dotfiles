#!/usr/bin/env bash

set -e 

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"


DOTFILES_LOG="$HOME/.dotfiles.log"

function _print () {
    printf "${1}${2}"
}

function _task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        _task_done	
    fi
    # set new task title and print
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
    _clear_task
}

function _task_faild {
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    _clear_task
    exit 1;
}


# _cmd performs commands with error checking
function _cmd {
    #create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi
    # empty conduro.log
    > $DOTFILES_LOG
    # hide stdout, on error we print and exit
    if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
        return 0 # success
    fi
    # read error from log and add spacing
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done < $DOTFILES_LOG
    printf "\n"
    # remove log file
    rm $DOTFILES_LOG
    # exit installation
    exit 1
}

function install_utilities_on_arch {
  if ! [[ -x "$(command -v python3)" ]]; then
    _task "Installing Python3 on ${1}"
      _cmd "sudo pacman -S --needed python3 --noconfirm"
  else
    _task "Python3 is installed"; _task_done
  fi
  
  if ! [[ -x "$(command -v pip3)" ]]; then
    _task "Installing Python3 Pip on ${1}"
      _cmd "sudo pacman -S --needed python-pip --noconfirm"
  else
    _task "Python3 Pip is installed"; _task_done
  fi
  
  if ! pip3 show -qqq watchdog; then
    _task "Installing Python3 Watchdog on ${1}"
      _cmd "sudo pacman -S --needed python-watchdog --noconfirm"
  else
    _task "Python3 Watchdog is installed"; _task_done
  fi
  
  if ! [[ -x "$(command -v git)" ]]; then
    _task "Installing Git on ${1}"
      _cmd "sudo pacman -S --needed git --noconfirm"
  else
    _task "Git is installed"; _task_done
  fi

  if ! pacman -Qs base-devel > /dev/null; then
    _task "Installing base-devel on ${1}"
      _cmd "sudo pacman -S --needed base-devel --noconfirm"
  else
    _task "base-devel is installed"; _task_done
  fi

}

function install_on_arch {
  if ! [[ -x "$(command -v ansible)" ]]; then
    _task "Installing Ansible on ${1}"
      _cmd "sudo pacman -S ansible --noconfirm"
  else
    _task "Ansible is installed"; _task_done
  fi
}

function export_distro_data {
  _task "Exporting Distro data to the env"
    _cmd "export $(cat /etc/os-release | tr ' ' '_' | tr -d '"' | grep -v ANSI_COLOR | tr '\n' ' ')"
}

function install_requirements {
  #Install Ansible if not exist
      OS="$(uname -s)"
      _task "Checking if ${OS} is supported"
      case "${OS}" in
          Linux*)
              export_distro_data;
              _task "Checking if ${ID} Distro is supported" 
              case "${ID_LIKE}" in
                  arch)
                       install_on_arch ${ID}
                       install_utilities_on_arch ${ID}
                      ;;
                  #uncoment to add debian support
                  #debian)
                  #    install_on_debian ${ID}
                  #    ;;
                  *)
                      #if [[ ${ID} == "fedora"  ]]; then
                          #install_on_fedora ${ID};
                      #else
                          TASK="${ID} Distro is Unsupported";
                          _task_faild;
                      #fi
                      ;;
              esac
              ;;
          Darwin*)
              ;;
          *)
              TASK="${OS} is Unsupported";
              _task_faild; 
              ;;
      esac
}


function get_user_password {
#    _print $YELLOW "User Sudo Password: ";
#    read -s PASSWORD;
    sudo echo -n
    #echo -e $OVERWRITE
    #echo -e $OVERWRITE
#    printf "\n";
}

APP_DIR="$HOME/apps"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_BIN_DIR="$DOTFILES_DIR/bin"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"

if ! [[ -x "$(command -v vim)" ]]; then
  _task "Installing vim"
    _cmd "sudo pacman -S vim --noconfirm"
else
  _task "Vim is installed"; _task_done
fi



_task "Setting up a simple vimrc config"
#setup a simple vim config just in case
  touch ~/.vimrc && echo "set tabstop=2 softtabstop=2
  set shiftwidth=2
  set expandtab
  set number
  set smartindent
  syntax on
  " > ~/.vimrc
  _task_done

#first thing get the user sudo password
get_user_password;
_task "Getting user sudo password"; _task_done

#exporting the bin folder to path
_task "Exporting bin to path"
  _cmd 'export PATH="$DOTFILES_BIN_DIR:${PATH}"'

_task "Exporting the apps to path"
  _cmd 'export PATH="$APP_DIR:${PATH}"'

install_requirements

#move this to ansible with it's dependencies
#installing keyd
#_task "Installing keyd from Source"
#  _cmd "git clone https://github.com/rvaiya/keyd /tmp/keyd"

#  pushd "/tmp/keyd" 2>&1 > /dev/null

#  _cmd "make" && _cmd "sudo PREFIX='/.local' DESTDIR=$HOME make install"
#  _cmd "rm -rf /tmp/keyd"
#  popd 2>&1 > /dev/null

# Generate SSH keys
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  _task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
    _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
else
  _task "SSH Keys are Setup"
fi

# Clone repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
      _cmd "git clone --quiet https://github.com/mohamed-souiyeh/dotfiles.git $DOTFILES_DIR"
else
    _task "Updating repository"
      _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

#technicaly change directory and add it to a stack of directories
pushd "$DOTFILES_DIR" 2>&1 > /dev/null

_task "Updating Galaxy"
  _cmd "ansible-galaxy install -r requirements.yml"

_task "Running playbook"; _task_done
# Run playbook
ansible-playbook $DFLAGS --diff "$DOTFILES_DIR/main.yml" --ask-vault-pass --ask-become-pass "$@"


#return to the last directorie
popd 2>&1 > /dev/null

_task "Refreshing docker group"
  _cmd "newgrp docker"


#dont forget to run keyd activation command here after the playbook id done and check if u need to do it at every startup to add it to the .zshrc file and bashrc

echo -e "${LGREEN} PLEASE NOTE: Open ~/.config/hypr/hyprland.conf to change your keyboard layout (default is us) and your screenresolution (default is preferred) if needed.${NC}"

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
else
  echo -e "${LGREEN}  ${CHECK_MARK}   ${LGREEN}Updating complete!${NC}" 
fi


