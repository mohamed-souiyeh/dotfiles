#!/usr/bin/env bash

set -e 

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"


DOTFILES_LOG="$HOME/.dotfiles.log"

function _print () {
    printf "${1}${2}"
}

function _task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        _task_done	
    fi
    # set new task title and print
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
    _clear_task
}

function _task_faild {
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    _clear_task
}


# _cmd performs commands with error checking
function _cmd {
    #create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi
    # empty conduro.log
    > $DOTFILES_LOG
    # hide stdout, on error we print and exit
    if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
        return 0 # success
    fi
    # read error from log and add spacing
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done < $DOTFILES_LOG
    printf "\n"
    # remove log file
    rm $DOTFILES_LOG
    # exit installation
    exit 1
}

function install_on_arch {
    _task "Installing Ansible on ${1}"
    _cmd "echo ${PASSWORD} | sudo pacman -S ansible --noconfirm"
}

function install_on_fedora {
    _task "Installing Ansible on ${1}"
    _cmd "sudo dnf install -y ansible"
}

function install_on_debian {
    _task "Installing Ansible on ${1}"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y ansible"
}

function install_on_mac {
    _task "Installing Ansible on ${1}"
    _cmd "brew install ansible"
}

function export_distro_data {
    _task "Exporting Distro data to the env"
    _cmd "export $(cat /etc/os-release | tr ' ' '_' | tr -d '"' | grep -v ANSI_COLOR | tr '\n' ' ')"
}

function get_user_password {
    _print $YELLOW "User Sudo Password: ";
    read -s PASSWORD;
    printf "\n";
}

CONFIG_DIR="$HOME/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"


#first thing get the user sudo password
get_user_password;

TASK="Getting user sudo password";

#setup a simple vim config just in case
touch ~/.vimrc && echo "set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set number
set smartindent
" > ~/.vimrc


#Install Ansible if not exist
if ! [ -x "$(command -v ansible)" ]; then
    OS="$(uname -s)"
    _task "Checking if ${OS} is supported"
    case "${OS}" in
        Linux*)
            export_distro_data;
            _task "Checking if ${ID} Distro is supported" 
            case "${ID_LIKE}" in
                arch)
                    install_on_arch ${ID}
                    ;;
                #uncoment to add debian support
                #debian)
                #    install_on_debian ${ID}
                #    ;;
                *)
                    #if [[ ${ID} == "fedora"  ]]; then
                        #install_on_fedora ${ID};
                    #else
                        TASK="${ID} Distro is Unsupported";
                        _task_faild;
                    #fi
                    ;;
            esac
            ;;
        Darwin*)
            ;;
        *)
            TASK="${OS} is Unsupported";
            _task_faild; 
            ;;
    esac
fi

# Generate SSH keys
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
    _task "Generating SSH keys"
        _cmd "mkdir -p $SSH_DIR"
        _cmd "chmod 700 $SSH_DIR"
        _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
        _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

# Clone repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    #    _cmd "git clone --quiet https://github.com/TechDufus/dotfiles.git $DOTFILES_DIR"
else
    _task "Updating repository"
    #    _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

#technicaly change directory and add it to a stack of directories
pushd "$DOTFILES_DIR" 2>&1 > /dev/null

_task "Updating Galaxy"
    _cmd "ansible-galaxy install -r requirements.yml"

_task "Running playbook"; _task_done
if [[ -f $VAULT_SECRET ]]; then
    ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

#return to the last directorie
popd 2>&1 > /dev/null

_task_done;
